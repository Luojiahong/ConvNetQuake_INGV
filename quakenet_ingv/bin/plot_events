#!/usr/bin/env python
# encoding: utf-8
# -------------------------------------------------------------------
# File:  plot_event_results
# Author: Anthony Lomax <anthony@alomax.net>
# Created: 2018-07-23
# ------------------------------------------------------------------#
from _pytest.runner import Skipped

""" Plot events on an interactive map"""

# import sys
import argparse
import os

from obspy.core import UTCDateTime
from obspy.core import event
from obspy import read_inventory

import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import folium
from folium.plugins import HeatMap
#from folium.plugins import MarkerCluster

import quakenet.util as util
import quakenet.plot as qnplot



def main(args):
        
    # get event files
    feature_group_events = folium.map.FeatureGroup(name=args.event_files_path, overlay=True, control=True)
    heat_map_data = []
    total_prob_magnitude = []
    total_prob_depth = []
    event_xml_file = None
    processed_origin_times=set()
    have_skipped=False
    for root, dirs, files in os.walk(args.event_files_path):
        for f in files:
            if f.endswith('.xml'):
                event_xml_file = f
                catalog = event.read_events(os.path.join(args.event_files_path, event_xml_file))
                for evt in catalog:
                    origin = evt.preferred_origin()
                    origin_time_isoformat = origin.time.isoformat()
                    if origin_time_isoformat in processed_origin_times:
                        print  '.',
                        have_skipped = True
                        continue
                    if have_skipped:
                        print  ''
                    have_skipped=False
                    event_preferred_magnitude = evt.preferred_magnitude().mag
                    print  origin_time_isoformat + ' M=' + str(event_preferred_magnitude) + ' ' + evt.event_descriptions[0].text
                    processed_origin_times.add(origin_time_isoformat)
                    origin_str = 'M=' + str(event_preferred_magnitude) + ' ' + evt.event_descriptions[0].text + '\n'
                    origin_str += '   '+ origin_time_isoformat  + '\n'
                    origin_str += '   '+ 'Lat:' + str(origin.latitude) + ' Lon:' + str(origin.longitude) + ' Depth:' + str(origin.depth / 1000.0) + 'km' + '\n'
                    marker = folium.CircleMarker([origin.latitude, origin.longitude], \
                                                          radius=3, popup=origin_str, stroke=True, weight=1, color='red', fill=True, fillColor='red', fillOpacity=1.0)
                    feature_group_events.add_child(marker)
                    # accumulate heatmap points
                    heat_map_data.append([origin.latitude, origin.longitude])
                    # accumulate magnitude
                    prob_magnitude = [0] * args.n_magnitudes
                    prob_magnitude[util.magntiude2classification(event_preferred_magnitude, args.n_magnitudes)] = 1.0
                    total_prob_magnitude.append(prob_magnitude)
                    # accumulate depth
                    prob_depth = [0] * args.n_depths
                    prob_depth[util.depth2classification(origin.depth / 1000.0, args.n_depths)] = 1.0
                    total_prob_depth.append(prob_depth)
                    
    if have_skipped:
        print  ''
                    
    events_heat_map = HeatMap(heat_map_data, name="Events heatmap", 
                                             min_opacity=0.5, max_zoom=18, max_val=1.0, radius=10, blur=10, gradient={0.2: 'blue', 0.6: 'lime', 0.9: 'yellow'}, overlay=True)
                                             #min_opacity=0.5, max_zoom=18, max_val=1.0, radius=25, blur=15, gradient=None, overlay=True)

    # read list of channels to use
    inventory = read_inventory(args.channel_file)
    inventory = inventory.select(channel=args.channel_prefix+'Z', sampling_rate=args.sampling_rate)
    feature_group_stations = folium.map.FeatureGroup(name=args.channel_file, overlay=True, control=True)
    for net in inventory:
        for sta in net:        
            net_sta = net.code + '_' + sta.code
            print 'net_sta', net_sta
            marker = folium.CircleMarker([sta.latitude, sta.longitude], \
                                                  radius=1, popup=net_sta, stroke=True, weight=2, color='black')
            feature_group_stations.add_child(marker)

    #folium_map = folium.Map(tiles='OpenStreetMap', attr='OpenStreetMap attribution', \
    #                        prefer_canvas=True, control_scale=True, zoom_start = 4, location=[origin.latitude, origin.longitude])
    folium_map = folium.Map(tiles='OpenStreetMap', attr='OpenStreetMap attribution', \
                            prefer_canvas=True, control_scale=True, zoom_start = 2, location=[0.0, 15.0])
    folium_map.add_child(feature_group_events)
    folium_map.add_child(feature_group_stations)
    folium_map.add_child(events_heat_map)
    folium.LayerControl().add_to(folium_map)
    htmlfile = os.path.join(args.event_files_path, 'events.html')
    folium_map.save(htmlfile)
    print 'HTML output written to'
    print htmlfile
    
    # magnitude bar chart
    v_axis_direction = -1
    qnplot.write_bar_chart_html('Magnitude Distribution', '', "Relative frequency", None, os.path.join(args.event_files_path, 'magnitudes.html'), \
                         total_prob_magnitude, 0.0, util.classification2magnitude,
                         v_axis_direction, normalize=True)
    
    # depth bar chart
    v_axis_direction = -1
    qnplot.write_bar_chart_html('Depth Distribution', '', "Relative frequency", None, os.path.join(args.event_files_path, 'depths.html'), \
                         total_prob_depth, 0.0, util.classification2depth,
                         v_axis_direction, normalize=True)
    


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--event_files_path', type=str, 
                        help='Path for event files input')
    parser.add_argument('--channel_file', type=str,
                        help='File containing FDSNStationXML list of net/station/location/channel to retrieve')
    parser.add_argument('--channel_prefix', type=str,
                        help='Prefix of the channel code to retrieve (e.g. BH)')
    parser.add_argument('--sampling_rate', type=float,
                        help='Channel sample rate to retrieve (e.g. 20)')
    parser.add_argument('--n_magnitudes', type=int, default=None,
                        help='Number of magnitude classes, 0=none')
    parser.add_argument('--n_depths', type=int, default=None,
                        help='Number of depth classes, 0=none')

    args = parser.parse_args()
    main(args)
